package CYGPKG_FS_FAT {
  display "FAT filesystem"

  option CYGNUM_FS_FAT_NODE_POOL_SIZE {
    display "Node pool size"
    default_value [(CYGNUM_FILEIO_NFILE + 2)]
    legal_values [1 to 9999999999 ]
    requires [CYGNUM_FS_FAT_NODE_POOL_SIZE >= (CYGNUM_FILEIO_NFILE + 2)]
    flavor data 
  }
}

package CYGPKG_IO_FILEIO {
  display "POSIX File IO compatibility layer"

  requires [CYGBLD_ISO_DIRENT_HEADER == "<cyg/fileio/dirent.h>"]

  option CYGNUM_FILEIO_NFILE {
    display "Maximum number of open files"
    default_value [16 ]
    legal_values [1 to 9999999]
    flavor data 
  }

  option CYGFUN_IO_FILEIO_SELECT {
    display "Enable support for select()"
    active_if [CYGPKG_KERNEL]
    default_value [1]
  }
}

package CYGPKG_ISOINFRA {
  option CYGBLD_ISO_DIRENT_HEADER {
    display "<dirent.h> definitions implementation header"
    default_value [0]
    flavor booldata 
  }
}

package CYGPKG_KERNEL {
  display "eCos kernel"

  component CYGPKG_KERNEL_SMP_SUPPORT {
    display "SMP support"
    default_value [0]
    flavor bool 
  }

  component CYGPKG_KERNEL_SCHED {
    display "Kernel schedulers"
    flavor none 

    component CYGNUM_KERNEL_SCHED_PRIORITIES {
      display "Number of priority levels"
      legal_values [1 to 32]
      default_value [32]
      flavor data 
		}
	}

  component CYGPKG_KERNEL_SYNCH {
    display "Synchronization primitives"
    flavor none 

    component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL {
      display "Priority inversion protection protocols"
      legal_values ["SIMPLE"]
      default_value ["SIMPLE"]
      flavor booldata 

      component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING {
        display "Enable priority ceiling protocol"
        default_value [1]

        option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY {
          display "Default priority ceiling"
          legal_values [0 to CYGNUM_KERNEL_SCHED_PRIORITIES - 1]
          default_value [0]
          active_if [CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING]
          flavor data 
        }
      }

      option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC {
        display "Specify mutex priority inversion protocol at runtime"
        default_value [1 ]
        active_if [CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 ]
      }

      interface CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT {
        display "Number of protocols selected"
      }
		}
	}
}

package CYGPKG_UITRON {
  component CYGPKG_UITRON_INTERRUPT_FUNCTIONS {
    display "Interrupt-safe functions"
    flavor none

    option CYGNUM_UITRON_ISR_ACTION_QUEUESIZE {
      display "Deferred operation queue size"
      legal_values [4 8 16 32 64 128 256]
      default_value [32]
      flavor data 
    }
  }
}

package CYGPKG_CPULOAD{
  display "Measure the current CPU load"
  requires [CYGPKG_KERNEL]
  requires [!CYGPKG_KERNEL_SMP_SUPPORT]
}

package CYGPKG_HAL {
  display "eCos HAL"

    component CYGBLD_HAL_LINKER_GROUPED_LIBS {
      display "Grouped libraries for linking"

      requires [is_substr(CYGBLD_HAL_LINKER_GROUPED_LIBS, "libtarget.a")]
      flavor data 
    }

	package CYGPKG_HAL_I386{
		package CYGPKG_HAL_I386_PC {
			option CYGHWR_HAL_I386_PC_LOAD_HIGH {
				display "Load into higher memory (2MB)"
				default_value [0 ]
				requires [CYG_HAL_STARTUP == "RAM" || CYG_HAL_STARTUP == "GRUB"]
				flavor bool 
			}

			component CYGHWR_MEMORY_LAYOUT{
				display "Memory layout"
				calculated [CYG_HAL_STARTUP == "RAM" ? (CYGHWR_HAL_I386_PC_LOAD_HIGH ? "i386_pc_ram_hi" : "i386_pc_ram") : CYG_HAL_STARTUP == "ROM" ? "i386_pc_rom" : CYG_HAL_STARTUP == "GRUB" ? (CYGHWR_HAL_I386_PC_LOAD_HIGH ? "i386_pc_grub_hi" : "i386_pc_grub") : "i386_pc_floppy" ]
				flavor data 
			}

			component CYG_HAL_STARTUP {
				display "Startup type"
				legal_values ["RAM" "FLOPPY" "ROM" "GRUB"]
				default_value ["RAM"]
				flavor data 
			}
		}
	}
}

package CYGPKG_IO_WALLCLOCK {
  display "Wallclock device"

  interface CYGINT_WALLCLOCK_IMPLEMENTATIONS {
    display "Number of wallclock implementations"
    requires [1 == CYGINT_WALLCLOCK_IMPLEMENTATIONS]
  }

  component CYGPKG_IO_WALLCLOCK_IMPLEMENTATION {
    display "Wallclock implementation"
    flavor none 

    option CYGIMP_WALLCLOCK_NONE {
      display "No wallclock"
      implements [CYGINT_WALLCLOCK_IMPLEMENTATIONS]
    }
  }
}

package CYGPKG_IO {
  display "I/O sub-system"

  package CYGPKG_IO_SERIAL{
    option CYGPKG_IO_SERIAL_SELECT_SUPPORT {
      display "Enable serial device select support"
      active_if [CYGPKG_IO_FILEIO]
      requires [CYGFUN_IO_FILEIO_SELECT == 1]
      default_value [1]
      flavor bool
    }
  }
}

package CYGPKG_POSIX{
  display "POSIX compatibility layer"

  component CYGPKG_POSIX_PTHREAD {
    display "POSIX pthread configuration"
    default_value [1]
    flavor bool 
  }
}

package CYGPKG_IO_FLASH {

  interface CYGHWR_IO_FLASH_INDIRECT_READS {
    display "Hardware requires indirect reads"
    flavor booldata 
  }

  interface CYGHWR_IO_FLASH_DEVICE {
    display "Hardware FLASH device drivers"
    requires [CYGHWR_IO_FLASH_DEVICE >= 1]
  }

  option CYGSEM_IO_FLASH_VERIFY_PROGRAM {
    display "Verify data programmed to flash"
    default_value [1]
    active_if [CYGHWR_IO_FLASH_INDIRECT_READS < CYGHWR_IO_FLASH_DEVICE]
    flavor bool 
  }
}

package CYGPKG_LIBC{
  display "ISO C library"

  package CYGPKG_LIBC_STARTUP{
    component CYGPKG_LIBC_STARTUP_CONTEXT {
      component CYGSEM_LIBC_STARTUP_MAIN_THREAD {
        display "Invoked as eCos thread"
        flavor bool 
      }    
    }

    component CYGPKG_LIBC_STARTUP_CONTEXT {
      display "Startup context for main()"
      flavor none 

      option CYGSEM_LIBC_STARTUP_MAIN_OTHER {
        display "Invoked elsewhere"
        flavor bool 
      }
    }

    option CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS {
      display "Invoke default static constructors"
      requires [CYGSEM_LIBC_STARTUP_MAIN_THREAD || (CYGSEM_LIBC_STARTUP_MAIN_OTHER && CYGPKG_POSIX_PTHREAD)]
      default_value [0 ]
    }
  }
}
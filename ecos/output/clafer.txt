

CYGPKG_IO extends CYGINT_HAL_DEBUG_GDB_STUBS
    display = "I/O sub-system"
    [CYGPKG_ERROR]

    CYGPKG_IO_SERIAL
        display = "Serial device drivers"
        -- ifActive (class gsd.cdl.model.Identifier)
        [CYGPKG_IO]
        [CYGPKG_ERROR]

        CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
            display = "Route diagnostic output to debug channel"
            -- default_value = [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS || #CYG_HAL_STARTUP = RAM ? 1 : 0]
            -- ifActive (class gsd.cdl.model.Not)
            [!CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE]
            -- ifActive (class gsd.cdl.model.Or)
            [CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG]

            CYGSEM_HAL_DIAG_MANGLER -> CYGSEM_HAL_DIAG_MANGLER_ENUM 
                display = "Mangler used on diag output"
                -- default_value = GDB
enum CYGSEM_HAL_DIAG_MANGLER_ENUM = GDB | None

        CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE -> integer 
            display = "Interrupt stack size"
            -- default_value = [CYGPKG_KERNEL ? 4096 : 32768]
            [128 <= this && this <= 1048576]

        CYGHWR_MEMORY_LAYOUT
            display = "Memory layout"
            calculated: [[[#CYG_HAL_STARTUP = RAM ? [CYGHWR_HAL_I386_PC_LOAD_HIGH ? i386_pc_ram_hi : i386_pc_ram] : #CYG_HAL_STARTUP = ROM] ? i386_pc_rom : #CYG_HAL_STARTUP = GRUB] ? [CYGHWR_HAL_I386_PC_LOAD_HIGH ? i386_pc_grub_hi : i386_pc_grub] : i386_pc_floppy]

        abstract CYGINT_IO_SERIAL_BLOCK_TRANSFER
            display = "Driver requires block transfer callback functions"

        CYGDBG_USE_ASSERTS
            display = "Use asserts"
            description = "conditions."
            -- default_value = 1

CYGPKG_HAL_I386_PC
    display = "i386 PC Target"
    'CYGINT_HAL_DEBUG_GDB_STUBS
    'CYGINT_HAL_DEBUG_GDB_STUBS_BREAK
    'CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT
    'CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED

    CYGPKG_HAL_I386_PC_MEMSIZE -> CYGPKG_HAL_I386_PC_MEMSIZE_ENUM 
        display = "How to discover the size of available RAM."
        -- default_value = BIOS
enum CYGPKG_HAL_I386_PC_MEMSIZE_ENUM = BIOS | HARDCODE

        CYGNUM_HAL_I386_PC_MEMSIZE_BASE -> integer 
            display = "Amount of Base RAM available."
            -- default_value = 0x000F0000
            -- ifActive (class gsd.cdl.model.Eq)
            [#CYGPKG_HAL_I386_PC_MEMSIZE = HARDCODE]

        CYGPKG_NET_MEM_USAGE -> integer 
            display = "Memory designated for networking buffers."
            -- default_value = ((256 * 1024) + (CYGPKG_NET_MAXSOCKETS * 1024))

    CYGPKG_HAL_DEBUG
        display = "Source-level debugging support"

        abstract CYGINT_HAL_DEBUG_GDB_STUBS
            display = "Support for GDB stubs"

        CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS ?
            display = "Include GDB stubs in HAL"
            -- default_value = 0
            -- ifActive (class gsd.cdl.model.Identifier)
            [CYGINT_HAL_DEBUG_GDB_STUBS]
            [!CYGSEM_HAL_USE_ROM_MONITOR]
            [!CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT]
            [!CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM]
            [!CYGSEM_HAL_VIRTUAL_VECTOR_DIAG || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS]

        abstract CYGINT_HAL_DEBUG_GDB_STUBS_BREAK
            display = "Support for external break support in GDB stubs"

        CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT ?
            display = "Include GDB external break support for stubs"
            -- default_value = CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
            -- ifActive (class gsd.cdl.model.Identifier)
            [CYGINT_HAL_DEBUG_GDB_STUBS_BREAK]
            [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS]

        abstract CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED
            display = "Platform does not support CTRLC"

        CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT ?
            display = "Include GDB external break support when no stubs"
            -- default_value = !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
            -- ifActive (class gsd.cdl.model.Or)
            [CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS]
            -- ifActive (class gsd.cdl.model.Eq)
            [#CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED = 0]
            [!CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT]

        CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT ?
            display = "Include GDB multi-threading debug support"
            -- default_value = 1
            -- ifActive (class gsd.cdl.model.Or)
            [CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT]

        CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES -> integer 
            display = "Number of times to retry sending a $O packet"
            -- default_value = 0

        CYGNUM_HAL_DEBUG_GDB_PROTOCOL_TIMEOUT -> integer 
            display = "Timeout period for GDB packets"
            -- default_value = 500

        CYGDBG_HAL_CRCTABLE_LOCATION -> CYGDBG_HAL_CRCTABLE_LOCATION_ENUM 
            display = "Location of CRC32 table"
            -- default_value = RAM
enum CYGDBG_HAL_CRCTABLE_LOCATION_ENUM = ROM | RAM

        CYGDBG_HAL_DEBUG_GDB_INITIAL_BREAK ?
            display = "Enable initial breakpoint"
            -- default_value = !CYGPKG_REDBOOT
            -- ifActive (class gsd.cdl.model.Identifier)
            [CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS]